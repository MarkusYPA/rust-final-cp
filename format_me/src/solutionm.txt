use std::fmt;

pub struct Park {
    pub name: Option<String>,
    pub park_type: ParkType,
    pub address: Option<String>,
    pub cap: Option<String>,
    pub state: Option<String>,
}

pub enum ParkType {
    Garden,
    Forest,
    Playground,
}

impl fmt::Display for Park {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        let mut res = String::from(format!("{}", self.park_type));

        res.push_str(" - ");

        if let Some(name) = &self.name {
            res.push_str(&name);
        } else {
            res.push_str("No name");
        }

        res.push_str(", ");

        if let Some(address) = &self.address {
            res.push_str(&address);
        } else {
            res.push_str("No address");
        }

        res.push_str(", ");

        if let Some(cap) = &self.cap {
            res.push_str(&cap);
        } else {
            res.push_str("No cap");
        }

        res.push_str(" - ");

        if let Some(state) = &self.state {
            res.push_str(&state);
        } else {
            res.push_str("No state");
        }

        write!(f, "{}", res)
    }
}

impl fmt::Display for ParkType {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        match self {
            Self::Forest => write!(f, "forest"),
            Self::Garden => write!(f, "garden"),
            Self::Playground => write!(f, "playground"),
        }
    }
}

#[cfg(test)]
mod tests;
